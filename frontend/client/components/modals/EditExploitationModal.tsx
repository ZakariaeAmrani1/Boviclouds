import React, { useState, useEffect } from "react";
import { 
  RefreshCw, 
  Building2, 
  User, 
  MapPin, 
  ChevronLeft, 
  ChevronRight,
  Check,
  Hash,
  Building,
  Phone,
  Mail,
  Calendar,
  Users,
  Save
} from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "../ui/dialog";
import { Button } from "../ui/button";
import { Input } from "../ui/input";
import { Label } from "../ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "../ui/select";
import { Checkbox } from "../ui/checkbox";
import { Badge } from "../ui/badge";
import { useToast } from "../../hooks/use-toast";
import { useExploitation, useUsers } from "../../hooks/useExploitation";
import { ExploitationRecord, UpdateExploitationInput } from "@shared/exploitation";
import {
  Step1ValidationSchema,
  Step2ValidationSchema,
  Step3ValidationSchema,
  Step4ValidationSchema,
  Step5ValidationSchema,
  formatValidationErrors,
  getProvincesForRegion,
} from "../../lib/exploitationValidation";
import { MOROCCAN_REGIONS } from "@shared/exploitation";
import MapPicker from "../ui/map-picker";

interface EditExploitationModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
  exploitation: ExploitationRecord;
}

interface FormData {
  numero_exploitation: string;
  nom_ferme: string;
  idbda_onssa: string;
  identifiant_responsable: string;
  gerant: string;
  eleveur_id: string;
  tel_contact: string;
  email_contact: string;
  region: string;
  province: string;
  adresse: string;
  location: {
    type: string;
    coordinates: number[];
  };
  sau: number;
  effectif_bovins: number;
  nb_vaches_lait: number;
  cooperative: boolean;
  date_creation: string;
}

const STEPS = [
  { id: 1, title: "Informations de base", icon: Hash },
  { id: 2, title: "Responsables", icon: Users },
  { id: 3, title: "Contact & Localisation", icon: MapPin },
  { id: 4, title: "Coordonnées GPS", icon: MapPin },
  { id: 5, title: "Détails de l'exploitation", icon: Building2 },
];

const EditExploitationModal: React.FC<EditExploitationModalProps> = ({
  isOpen,
  onClose,
  onSuccess,
  exploitation,
}) => {
  const { toast } = useToast();
  const { updateRecord, loading } = useExploitation();
  const { users } = useUsers();

  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState<FormData>({
    numero_exploitation: "",
    nom_ferme: "",
    idbda_onssa: "",
    identifiant_responsable: "",
    gerant: "",
    eleveur_id: "",
    tel_contact: "",
    email_contact: "",
    region: "",
    province: "",
    adresse: "",
    location: {
      type: "Point",
      coordinates: [-7.5898, 33.9716],
    },
    sau: 0,
    effectif_bovins: 0,
    nb_vaches_lait: 0,
    cooperative: false,
    date_creation: "",
  });

  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Initialize form with exploitation data
  useEffect(() => {
    if (isOpen && exploitation) {
      setCurrentStep(1);
      setFormData({
        numero_exploitation: exploitation.numero_exploitation,
        nom_ferme: exploitation.nom_ferme,
        idbda_onssa: exploitation.idbda_onssa,
        identifiant_responsable: exploitation.identifiant_responsable,
        gerant: exploitation.gerant,
        eleveur_id: exploitation.eleveur_id,
        tel_contact: exploitation.tel_contact,
        email_contact: exploitation.email_contact,
        region: exploitation.region,
        province: exploitation.province,
        adresse: exploitation.adresse,
        location: exploitation.location,
        sau: exploitation.sau,
        effectif_bovins: exploitation.effectif_bovins,
        nb_vaches_lait: exploitation.nb_vaches_lait,
        cooperative: exploitation.cooperative,
        date_creation: exploitation.date_creation.split('T')[0], // Format for date input
      });
      setErrors({});
    }
  }, [isOpen, exploitation]);

  // Handle input changes
  const handleInputChange = (field: keyof FormData, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    // Clear error for this field
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: "" }));
    }
  };

  // Handle region change to update provinces
  const handleRegionChange = (region: string) => {
    setFormData(prev => ({ 
      ...prev, 
      region, 
      province: "" // Reset province when region changes
    }));
    if (errors.region) {
      setErrors(prev => ({ ...prev, region: "", province: "" }));
    }
  };

  // Validate current step
  const validateStep = (step: number): boolean => {
    setErrors({});
    
    try {
      switch (step) {
        case 1:
          Step1ValidationSchema.parse({
            numero_exploitation: formData.numero_exploitation,
            nom_ferme: formData.nom_ferme,
            idbda_onssa: formData.idbda_onssa,
          });
          break;
        case 2:
          Step2ValidationSchema.parse({
            identifiant_responsable: formData.identifiant_responsable,
            gerant: formData.gerant,
            eleveur_id: formData.eleveur_id,
          });
          break;
        case 3:
          Step3ValidationSchema.parse({
            tel_contact: formData.tel_contact,
            email_contact: formData.email_contact,
            region: formData.region,
            province: formData.province,
            adresse: formData.adresse,
          });
          break;
        case 4:
          Step4ValidationSchema.parse({
            location: formData.location,
          });
          break;
        case 5:
          Step5ValidationSchema.parse({
            sau: formData.sau,
            effectif_bovins: formData.effectif_bovins,
            nb_vaches_lait: formData.nb_vaches_lait,
            cooperative: formData.cooperative,
            date_creation: formData.date_creation,
          });
          break;
      }
      return true;
    } catch (error: any) {
      const formattedErrors = formatValidationErrors(error);
      setErrors(formattedErrors);
      return false;
    }
  };

  // Handle next step
  const handleNext = () => {
    if (validateStep(currentStep)) {
      setCurrentStep(prev => Math.min(prev + 1, STEPS.length));
    }
  };

  // Handle previous step
  const handlePrevious = () => {
    setCurrentStep(prev => Math.max(prev - 1, 1));
  };

  // Handle form submission
  const handleSubmit = async () => {
    if (!validateStep(5)) return;

    setIsSubmitting(true);
    try {
      const input: UpdateExploitationInput = {
        numero_exploitation: formData.numero_exploitation,
        nom_ferme: formData.nom_ferme,
        idbda_onssa: formData.idbda_onssa,
        identifiant_responsable: formData.identifiant_responsable,
        gerant: formData.gerant,
        eleveur_id: formData.eleveur_id,
        tel_contact: formData.tel_contact,
        email_contact: formData.email_contact,
        region: formData.region,
        province: formData.province,
        adresse: formData.adresse,
        location: formData.location,
        sau: formData.sau,
        effectif_bovins: formData.effectif_bovins,
        nb_vaches_lait: formData.nb_vaches_lait,
        cooperative: formData.cooperative,
        date_creation: formData.date_creation,
      };

      const result = await updateRecord(exploitation.id, input);
      
      if (result) {
        toast({
          title: "Exploitation modifiée",
          description: `L'exploitation "${formData.nom_ferme}" a été modifiée avec succès.`,
        });
        onSuccess();
      } else {
        toast({
          title: "Erreur de modification",
          description: "Une erreur est survenue lors de la modification de l'exploitation.",
          variant: "destructive",
        });
      }
    } catch (error) {
      toast({
        title: "Erreur de modification",
        description: "Une erreur inattendue est survenue.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // Handle location selection from map
  const handleLocationSelect = (coordinates: [number, number]) => {
    setFormData(prev => ({
      ...prev,
      location: {
        type: "Point",
        coordinates,
      },
    }));
  };

  // Get available provinces for selected region
  const availableProvinces = formData.region ? getProvincesForRegion(formData.region) : [];

  // Render step content (same as AddExploitationModal but with different values)
  const renderStepContent = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="space-y-4">
            <div>
              <Label htmlFor="numero_exploitation" className="flex items-center gap-2">
                <Hash className="w-4 h-4" />
                Numéro d'exploitation *
              </Label>
              <Input
                id="numero_exploitation"
                value={formData.numero_exploitation}
                onChange={(e) => handleInputChange("numero_exploitation", e.target.value)}
                placeholder="FR12345678"
                className={errors.numero_exploitation ? "border-red-500" : ""}
              />
              {errors.numero_exploitation && (
                <p className="text-sm text-red-600 mt-1">{errors.numero_exploitation}</p>
              )}
            </div>

            <div>
              <Label htmlFor="nom_ferme" className="flex items-center gap-2">
                <Building className="w-4 h-4" />
                Nom de la ferme *
              </Label>
              <Input
                id="nom_ferme"
                value={formData.nom_ferme}
                onChange={(e) => handleInputChange("nom_ferme", e.target.value)}
                placeholder="Ferme Atlas"
                className={errors.nom_ferme ? "border-red-500" : ""}
              />
              {errors.nom_ferme && (
                <p className="text-sm text-red-600 mt-1">{errors.nom_ferme}</p>
              )}
            </div>

            <div>
              <Label htmlFor="idbda_onssa" className="flex items-center gap-2">
                <Hash className="w-4 h-4" />
                ID BDA ONSSA *
              </Label>
              <Input
                id="idbda_onssa"
                value={formData.idbda_onssa}
                onChange={(e) => handleInputChange("idbda_onssa", e.target.value)}
                placeholder="BDA123456"
                className={errors.idbda_onssa ? "border-red-500" : ""}
              />
              {errors.idbda_onssa && (
                <p className="text-sm text-red-600 mt-1">{errors.idbda_onssa}</p>
              )}
            </div>
          </div>
        );

      case 2:
        return (
          <div className="space-y-4">
            <div>
              <Label htmlFor="identifiant_responsable" className="flex items-center gap-2">
                <User className="w-4 h-4" />
                Responsable *
              </Label>
              <Select
                value={formData.identifiant_responsable}
                onValueChange={(value) => handleInputChange("identifiant_responsable", value)}
              >
                <SelectTrigger className={errors.identifiant_responsable ? "border-red-500" : ""}>
                  <SelectValue placeholder="Sélectionner un responsable" />
                </SelectTrigger>
                <SelectContent>
                  {users.map((user) => (
                    <SelectItem key={user.id} value={user.id}>
                      {user.prenom} {user.nom} ({user.email})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              {errors.identifiant_responsable && (
                <p className="text-sm text-red-600 mt-1">{errors.identifiant_responsable}</p>
              )}
            </div>

            <div>
              <Label htmlFor="gerant" className="flex items-center gap-2">
                <User className="w-4 h-4" />
                Gérant *
              </Label>
              <Input
                id="gerant"
                value={formData.gerant}
                onChange={(e) => handleInputChange("gerant", e.target.value)}
                placeholder="Nom du gérant"
                className={errors.gerant ? "border-red-500" : ""}
              />
              {errors.gerant && (
                <p className="text-sm text-red-600 mt-1">{errors.gerant}</p>
              )}
            </div>

            <div>
              <Label htmlFor="eleveur_id" className="flex items-center gap-2">
                <User className="w-4 h-4" />
                Éleveur *
              </Label>
              <Select
                value={formData.eleveur_id}
                onValueChange={(value) => handleInputChange("eleveur_id", value)}
              >
                <SelectTrigger className={errors.eleveur_id ? "border-red-500" : ""}>
                  <SelectValue placeholder="Sélectionner un éleveur" />
                </SelectTrigger>
                <SelectContent>
                  {users.map((user) => (
                    <SelectItem key={user.id} value={user.id}>
                      {user.prenom} {user.nom} ({user.email})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              {errors.eleveur_id && (
                <p className="text-sm text-red-600 mt-1">{errors.eleveur_id}</p>
              )}
            </div>
          </div>
        );

      case 3:
        return (
          <div className="space-y-4">
            <div>
              <Label htmlFor="tel_contact" className="flex items-center gap-2">
                <Phone className="w-4 h-4" />
                Téléphone de contact *
              </Label>
              <Input
                id="tel_contact"
                value={formData.tel_contact}
                onChange={(e) => handleInputChange("tel_contact", e.target.value)}
                placeholder="+212 6 12 34 56 78"
                className={errors.tel_contact ? "border-red-500" : ""}
              />
              {errors.tel_contact && (
                <p className="text-sm text-red-600 mt-1">{errors.tel_contact}</p>
              )}
            </div>

            <div>
              <Label htmlFor="email_contact" className="flex items-center gap-2">
                <Mail className="w-4 h-4" />
                Email de contact *
              </Label>
              <Input
                id="email_contact"
                type="email"
                value={formData.email_contact}
                onChange={(e) => handleInputChange("email_contact", e.target.value)}
                placeholder="contact@ferme.ma"
                className={errors.email_contact ? "border-red-500" : ""}
              />
              {errors.email_contact && (
                <p className="text-sm text-red-600 mt-1">{errors.email_contact}</p>
              )}
            </div>

            <div>
              <Label htmlFor="region" className="flex items-center gap-2">
                <MapPin className="w-4 h-4" />
                Région *
              </Label>
              <Select
                value={formData.region}
                onValueChange={handleRegionChange}
              >
                <SelectTrigger className={errors.region ? "border-red-500" : ""}>
                  <SelectValue placeholder="Sélectionner une région" />
                </SelectTrigger>
                <SelectContent>
                  {MOROCCAN_REGIONS.map((region) => (
                    <SelectItem key={region} value={region}>
                      {region}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              {errors.region && (
                <p className="text-sm text-red-600 mt-1">{errors.region}</p>
              )}
            </div>

            <div>
              <Label htmlFor="province" className="flex items-center gap-2">
                <MapPin className="w-4 h-4" />
                Province *
              </Label>
              <Select
                value={formData.province}
                onValueChange={(value) => handleInputChange("province", value)}
                disabled={!formData.region}
              >
                <SelectTrigger className={errors.province ? "border-red-500" : ""}>
                  <SelectValue placeholder="Sélectionner une province" />
                </SelectTrigger>
                <SelectContent>
                  {availableProvinces.map((province) => (
                    <SelectItem key={province} value={province}>
                      {province}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              {errors.province && (
                <p className="text-sm text-red-600 mt-1">{errors.province}</p>
              )}
            </div>

            <div>
              <Label htmlFor="adresse" className="flex items-center gap-2">
                <MapPin className="w-4 h-4" />
                Adresse *
              </Label>
              <Input
                id="adresse"
                value={formData.adresse}
                onChange={(e) => handleInputChange("adresse", e.target.value)}
                placeholder="Adresse complète"
                className={errors.adresse ? "border-red-500" : ""}
              />
              {errors.adresse && (
                <p className="text-sm text-red-600 mt-1">{errors.adresse}</p>
              )}
            </div>
          </div>
        );

      case 4:
        return (
          <div className="space-y-4">
            <MapPicker
              initialCoordinates={formData.location.coordinates as [number, number]}
              onLocationSelect={handleLocationSelect}
            />
            {errors["location.coordinates"] && (
              <p className="text-sm text-red-600">{errors["location.coordinates"]}</p>
            )}
          </div>
        );

      case 5:
        return (
          <div className="space-y-4">
            <div>
              <Label htmlFor="sau" className="flex items-center gap-2">
                <Building2 className="w-4 h-4" />
                SAU (Surface Agricole Utile en hectares) *
              </Label>
              <Input
                id="sau"
                type="number"
                min="0"
                step="0.1"
                value={formData.sau}
                onChange={(e) => handleInputChange("sau", parseFloat(e.target.value) || 0)}
                placeholder="0"
                className={errors.sau ? "border-red-500" : ""}
              />
              {errors.sau && (
                <p className="text-sm text-red-600 mt-1">{errors.sau}</p>
              )}
            </div>

            <div>
              <Label htmlFor="effectif_bovins" className="flex items-center gap-2">
                <Building2 className="w-4 h-4" />
                Effectif de bovins (nombre de têtes) *
              </Label>
              <Input
                id="effectif_bovins"
                type="number"
                min="0"
                value={formData.effectif_bovins}
                onChange={(e) => handleInputChange("effectif_bovins", parseInt(e.target.value) || 0)}
                placeholder="0"
                className={errors.effectif_bovins ? "border-red-500" : ""}
              />
              {errors.effectif_bovins && (
                <p className="text-sm text-red-600 mt-1">{errors.effectif_bovins}</p>
              )}
            </div>

            <div>
              <Label htmlFor="nb_vaches_lait" className="flex items-center gap-2">
                <Building2 className="w-4 h-4" />
                Nombre de vaches laitières *
              </Label>
              <Input
                id="nb_vaches_lait"
                type="number"
                min="0"
                max={formData.effectif_bovins}
                value={formData.nb_vaches_lait}
                onChange={(e) => handleInputChange("nb_vaches_lait", parseInt(e.target.value) || 0)}
                placeholder="0"
                className={errors.nb_vaches_lait ? "border-red-500" : ""}
              />
              {errors.nb_vaches_lait && (
                <p className="text-sm text-red-600 mt-1">{errors.nb_vaches_lait}</p>
              )}
            </div>

            <div className="flex items-center space-x-2">
              <Checkbox
                id="cooperative"
                checked={formData.cooperative}
                onCheckedChange={(checked) => handleInputChange("cooperative", checked)}
              />
              <Label htmlFor="cooperative" className="flex items-center gap-2">
                <Building2 className="w-4 h-4" />
                Membre d'une coopérative
              </Label>
            </div>

            <div>
              <Label htmlFor="date_creation" className="flex items-center gap-2">
                <Calendar className="w-4 h-4" />
                Date de création de l'exploitation *
              </Label>
              <Input
                id="date_creation"
                type="date"
                value={formData.date_creation}
                onChange={(e) => handleInputChange("date_creation", e.target.value)}
                className={errors.date_creation ? "border-red-500" : ""}
              />
              {errors.date_creation && (
                <p className="text-sm text-red-600 mt-1">{errors.date_creation}</p>
              )}
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-2xl max-h-[90vh] overflow-hidden flex flex-col">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Building2 className="w-5 h-5 text-boviclouds-primary" />
            Modifier l'exploitation
            <Badge variant="outline" className="ml-2">
              {exploitation.numero_exploitation}
            </Badge>
          </DialogTitle>
        </DialogHeader>

        {/* Step Indicator */}
        <div className="flex items-center justify-between mb-6">
          {STEPS.map((step, index) => {
            const StepIcon = step.icon;
            const isActive = step.id === currentStep;
            const isCompleted = step.id < currentStep;
            
            return (
              <div key={step.id} className="flex items-center">
                <div
                  className={`flex items-center justify-center w-8 h-8 rounded-full border-2 ${
                    isCompleted
                      ? "bg-green-500 border-green-500 text-white"
                      : isActive
                      ? "border-boviclouds-primary text-boviclouds-primary"
                      : "border-gray-300 text-gray-400"
                  }`}
                >
                  {isCompleted ? (
                    <Check className="w-4 h-4" />
                  ) : (
                    <StepIcon className="w-4 h-4" />
                  )}
                </div>
                {index < STEPS.length - 1 && (
                  <div
                    className={`w-8 h-0.5 ml-2 ${
                      isCompleted ? "bg-green-500" : "bg-gray-300"
                    }`}
                  />
                )}
              </div>
            );
          })}
        </div>

        {/* Step Title */}
        <div className="mb-4">
          <h3 className="text-lg font-medium text-gray-900">
            Étape {currentStep}: {STEPS[currentStep - 1].title}
          </h3>
          <p className="text-sm text-gray-600">
            {currentStep === 1 && "Modifiez les informations de base de l'exploitation"}
            {currentStep === 2 && "Modifiez les responsables de l'exploitation"}
            {currentStep === 3 && "Modifiez les informations de contact et de localisation"}
            {currentStep === 4 && "Ajustez la position géographique sur la carte"}
            {currentStep === 5 && "Modifiez les détails techniques de l'exploitation"}
          </p>
        </div>

        {/* Step Content */}
        <div className="flex-1 overflow-y-auto">
          {renderStepContent()}
        </div>

        {/* Footer */}
        <DialogFooter className="flex flex-col sm:flex-row gap-2 mt-6">
          <div className="flex justify-between w-full">
            <Button
              type="button"
              variant="outline"
              onClick={handlePrevious}
              disabled={currentStep === 1}
            >
              <ChevronLeft className="w-4 h-4 mr-2" />
              Précédent
            </Button>
            
            <div className="flex gap-2">
              <Button
                type="button"
                variant="outline"
                onClick={onClose}
                disabled={isSubmitting}
              >
                Annuler
              </Button>
              
              {currentStep < STEPS.length ? (
                <Button
                  type="button"
                  onClick={handleNext}
                  className="bg-boviclouds-primary hover:bg-boviclouds-green-dark"
                >
                  Suivant
                  <ChevronRight className="w-4 h-4 ml-2" />
                </Button>
              ) : (
                <Button
                  type="button"
                  onClick={handleSubmit}
                  disabled={isSubmitting}
                  className="bg-blue-600 hover:bg-blue-700"
                >
                  {isSubmitting ? (
                    <>
                      <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                      Modification...
                    </>
                  ) : (
                    <>
                      <Save className="w-4 h-4 mr-2" />
                      Sauvegarder les modifications
                    </>
                  )}
                </Button>
              )}
            </div>
          </div>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default EditExploitationModal;
