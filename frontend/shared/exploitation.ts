import { z } from "zod";

// Base exploitation record interface
export interface ExploitationRecord {
  id: string;
  numero_exploitation: string;
  nom_ferme: string;
  idbda_onssa: string;
  identifiant_responsable: string;
  gerant: string;
  tel_contact: string;
  email_contact: string;
  eleveur_id: string;
  region: string;
  province: string;
  adresse: string;
  location: {
    type: string;
    coordinates: number[];
  };
  sau: number;
  effectif_bovins: number;
  nb_vaches_lait: number;
  cooperative: boolean;
  date_creation: string;
  date_modification: string;
  createdAt: string;
  updatedAt: string;
  createdBy: string;
}

// Input for creating a new exploitation record
export interface CreateExploitationInput {
  numero_exploitation: string;
  nom_ferme: string;
  idbda_onssa: string;
  identifiant_responsable: string;
  gerant: string;
  tel_contact: string;
  email_contact: string;
  eleveur_id: string;
  region: string;
  province: string;
  adresse: string;
  location: {
    type: string;
    coordinates: number[];
  };
  sau: number;
  effectif_bovins: number;
  nb_vaches_lait: number;
  cooperative: boolean;
  date_creation: string;
  createdBy: string;
}

// Input for updating an existing exploitation record
export interface UpdateExploitationInput {
  numero_exploitation?: string;
  nom_ferme?: string;
  idbda_onssa?: string;
  identifiant_responsable?: string;
  gerant?: string;
  tel_contact?: string;
  email_contact?: string;
  eleveur_id?: string;
  region?: string;
  province?: string;
  adresse?: string;
  location?: {
    type: string;
    coordinates: number[];
  };
  sau?: number;
  effectif_bovins?: number;
  nb_vaches_lait?: number;
  cooperative?: boolean;
  date_creation?: string;
}

// Search/filter parameters
export interface ExploitationFilters {
  numero_exploitation?: string;
  nom_ferme?: string;
  idbda_onssa?: string;
  identifiant_responsable?: string;
  gerant?: string;
  region?: string;
  province?: string;
  cooperative?: boolean;
  createdBy?: string;
  dateCreation?: string;
}

// Pagination parameters
export interface PaginationParams {
  page: number;
  limit: number;
}

// Paginated response
export interface PaginatedResponse<T> {
  data: T[];
  total: number;
  page: number;
  limit: number;
  totalPages: number;
}

// API response types
export interface ExploitationResponse {
  success: boolean;
  data?: ExploitationRecord;
  message?: string;
}

export interface ExploitationListResponse {
  success: boolean;
  data?: PaginatedResponse<ExploitationRecord>;
  message?: string;
}

// Statistics interface
export interface ExploitationStats {
  total: number;
  thisMonth: number;
  thisYear: number;
  totalSAU: number;
  totalBovins: number;
  totalVachesLait: number;
  cooperativeCount: number;
  topRegions: Array<{
    region: string;
    count: number;
  }>;
  topProvinces: Array<{
    province: string;
    count: number;
  }>;
}

// User interface for dropdowns (shared with other modules)
export interface User {
  id: string;
  nom: string;
  prenom: string;
  email: string;
  role: string;
}

// Users list response
export interface UsersListResponse {
  success: boolean;
  data?: User[];
  message?: string;
}

// Location data structure
export interface LocationCoordinates {
  type: "Point";
  coordinates: [number, number]; // [longitude, latitude]
}

// Multi-step form data structure
export interface ExploitationFormSteps {
  step1: {
    numero_exploitation: string;
    nom_ferme: string;
    idbda_onssa: string;
  };
  step2: {
    identifiant_responsable: string;
    gerant: string;
    eleveur_id: string;
  };
  step3: {
    tel_contact: string;
    email_contact: string;
    region: string;
    province: string;
    adresse: string;
  };
  step4: {
    location: {
      type: string;
      coordinates: number[];
    };
  };
  step5: {
    sau: number;
    effectif_bovins: number;
    nb_vaches_lait: number;
    cooperative: boolean;
    date_creation: string;
  };
}

// Zod validation schemas
export const CreateExploitationSchema = z.object({
  numero_exploitation: z.string().min(1, "Le numéro d'exploitation est requis"),
  nom_ferme: z.string().min(1, "Le nom de la ferme est requis"),
  idbda_onssa: z.string().min(1, "L'ID BDA ONSSA est requis"),
  identifiant_responsable: z.string().min(1, "L'identifiant du responsable est requis"),
  gerant: z.string().min(1, "Le gérant est requis"),
  tel_contact: z.string().min(1, "Le téléphone de contact est requis"),
  email_contact: z.string().email("Email invalide"),
  eleveur_id: z.string().min(1, "L'éleveur est requis"),
  region: z.string().min(1, "La région est requise"),
  province: z.string().min(1, "La province est requise"),
  adresse: z.string().min(1, "L'adresse est requise"),
  location: z.object({
    type: z.string(),
    coordinates: z.array(z.number()).length(2),
  }),
  sau: z.number().min(0, "La SAU doit être positive"),
  effectif_bovins: z.number().min(0, "L'effectif de bovins doit être positif"),
  nb_vaches_lait: z.number().min(0, "Le nombre de vaches laitières doit être positif"),
  cooperative: z.boolean(),
  date_creation: z.string().min(1, "La date de création est requise"),
  createdBy: z.string().min(1, "Le créateur est requis"),
});

export const UpdateExploitationSchema = z.object({
  numero_exploitation: z.string().min(1, "Le numéro d'exploitation est requis").optional(),
  nom_ferme: z.string().min(1, "Le nom de la ferme est requis").optional(),
  idbda_onssa: z.string().min(1, "L'ID BDA ONSSA est requis").optional(),
  identifiant_responsable: z.string().min(1, "L'identifiant du responsable est requis").optional(),
  gerant: z.string().min(1, "Le gérant est requis").optional(),
  tel_contact: z.string().min(1, "Le téléphone de contact est requis").optional(),
  email_contact: z.string().email("Email invalide").optional(),
  eleveur_id: z.string().min(1, "L'éleveur est requis").optional(),
  region: z.string().min(1, "La région est requise").optional(),
  province: z.string().min(1, "La province est requise").optional(),
  adresse: z.string().min(1, "L'adresse est requise").optional(),
  location: z.object({
    type: z.string(),
    coordinates: z.array(z.number()).length(2),
  }).optional(),
  sau: z.number().min(0, "La SAU doit être positive").optional(),
  effectif_bovins: z.number().min(0, "L'effectif de bovins doit être positif").optional(),
  nb_vaches_lait: z.number().min(0, "Le nombre de vaches laitières doit être positif").optional(),
  cooperative: z.boolean().optional(),
  date_creation: z.string().min(1, "La date de création est requise").optional(),
});

export const ExploitationFiltersSchema = z.object({
  numero_exploitation: z.string().optional(),
  nom_ferme: z.string().optional(),
  idbda_onssa: z.string().optional(),
  identifiant_responsable: z.string().optional(),
  gerant: z.string().optional(),
  region: z.string().optional(),
  province: z.string().optional(),
  cooperative: z.boolean().optional(),
  createdBy: z.string().optional(),
  dateCreation: z.string().optional(),
});

export const PaginationSchema = z.object({
  page: z.number().min(1).default(1),
  limit: z.number().min(1).max(100).default(10),
});

// Common regions and provinces for dropdowns
export const MOROCCAN_REGIONS = [
  "Tanger-Tétouan-Al Hoceïma",
  "L'Oriental",
  "Fès-Meknès",
  "Rabat-Salé-Kénitra",
  "Béni Mellal-Khénifra",
  "Casablanca-Settat",
  "Marrakech-Safi",
  "Drâa-Tafilalet",
  "Souss-Massa",
  "Guelmim-Oued Noun",
  "Laâyoune-Sakia El Hamra",
  "Dakhla-Oued Ed-Dahab",
];

export const PROVINCE_BY_REGION: Record<string, string[]> = {
  "Tanger-Tétouan-Al Hoceïma": [
    "Tanger-Assilah",
    "M'diq-Fnideq",
    "Tétouan",
    "Fahs-Anjra",
    "Larache",
    "Al Hoceïma",
    "Chefchaouen",
    "Ouezzane",
  ],
  "L'Oriental": [
    "Oujda-Angad",
    "Nador",
    "Driouch",
    "Jerada",
    "Berkane",
    "Taourirt",
    "Guercif",
    "Figuig",
  ],
  "Fès-Meknès": [
    "Fès",
    "Meknès",
    "El Hajeb",
    "Ifrane",
    "Moulay Yacoub",
    "Sefrou",
    "Boulemane",
    "Taounate",
    "Taza",
  ],
  "Rabat-Salé-Kénitra": [
    "Rabat",
    "Salé",
    "Skhirate-Témara",
    "Kénitra",
    "Khémisset",
    "Sidi Kacem",
    "Sidi Slimane",
  ],
  "Béni Mellal-Khénifra": [
    "Béni Mellal",
    "Azilal",
    "Fquih Ben Salah",
    "Khénifra",
    "Khouribga",
  ],
  "Casablanca-Settat": [
    "Casablanca",
    "Mohammedia",
    "El Jadida",
    "Nouaceur",
    "Médiouna",
    "Benslimane",
    "Berrechid",
    "Settat",
    "Sidi Bennour",
  ],
  "Marrakech-Safi": [
    "Marrakech",
    "Chichaoua",
    "Al Haouz",
    "Kelâa des Sraghna",
    "Essaouira",
    "Rehamna",
    "Safi",
    "Youssoufia",
  ],
  "Drâa-Tafilalet": [
    "Errachidia",
    "Midelt",
    "Tinghir",
    "Zagora",
    "Ouarzazate",
  ],
  "Souss-Massa": [
    "Agadir Ida-Ou-Tanane",
    "Inezgane-Aït Melloul",
    "Chtouka-Aït Baha",
    "Taroudannt",
    "Tiznit",
    "Tata",
  ],
  "Guelmim-Oued Noun": [
    "Guelmim",
    "Assa-Zag",
    "Tan-Tan",
    "Sidi Ifni",
  ],
  "Laâyoune-Sakia El Hamra": [
    "Laâyoune",
    "Boujdour",
    "Tarfaya",
    "Es-Semara",
  ],
  "Dakhla-Oued Ed-Dahab": [
    "Oued Ed-Dahab",
    "Aousserd",
  ],
};
